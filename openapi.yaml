openapi: 3.1.0
info:
  title: ScholarAI Chat Completions API
  version: v1
  description: |
    OpenAPI spec for the ScholarAI chat completions endpoint, based on the example usage in examples.py and https://docs.scholarai.io/api-reference/api/chat-completions
servers:
  - url: https://api.scholarai.io/api
paths:
  /chat/completions:
    post:
      summary: Create a chat completion
      operationId: createChatCompletion
      x-codeSamples:
        - lang: Shell
          label: curl
          source: |
            curl --request POST \
              --url https://api.scholarai.io/api/chat/completions \
              --header 'Content-Type: application/json' \
              --header 'x-scholarai-api-key: <api-key>' \
              --data '{
              "model": "<string>",
              "messages": [
                {
                  "role": "<string>",
                  "content": "<string>"
                }
              ],
              "stream": true
            }'
        - lang: Python
          source: |
            import requests
            url = "https://api.scholarai.io/api/chat/completions"
            payload = {
                "model": "<string>",
                "messages": [
                    {"role": "<string>", "content": "<string>"}
                ],
                "stream": True
            }
            headers = {
                "x-scholarai-api-key": "<api-key>",
                "Content-Type": "application/json"
            }
            response = requests.request("POST", url, json=payload, headers=headers)
            print(response.text)
        - lang: JavaScript
          source: |
            const options = {
              method: 'POST',
              headers: {'x-scholarai-api-key': '<api-key>', 'Content-Type': 'application/json'},
              body: '{"model":"<string>","messages":[{"role":"<string>","content":"<string>"}],"stream":true}'
            };
            fetch('https://api.scholarai.io/api/chat/completions', options)
              .then(response => response.json())
              .then(response => console.log(response))
              .catch(err => console.error(err));
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();
            curl_setopt_array($curl, [
              CURLOPT_URL => "https://api.scholarai.io/api/chat/completions",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "POST",
              CURLOPT_POSTFIELDS => "{\n  \"model\": \"<string>\",\n  \"messages\": [\n    {\n      \"role\": \"<string>\",\n      \"content\": \"<string>\"\n    }\n  ],\n  \"stream\": true\n}",
              CURLOPT_HTTPHEADER => [
                "Content-Type: application/json",
                "x-scholarai-api-key: <api-key>"
              ],
            ]);
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Go
          source: |
            package main
            import (
              "fmt"
              "strings"
              "net/http"
              "io/ioutil"
            )
            func main() {
              url := "https://api.scholarai.io/api/chat/completions"
              payload := strings.NewReader("{\n  \"model\": \"<string>\",\n  \"messages\": [\n    {\n      \"role\": \"<string>\",\n      \"content\": \"<string>\"\n    }\n  ],\n  \"stream\": true\n}")
              req, _ := http.NewRequest("POST", url, payload)
              req.Header.Add("x-scholarai-api-key", "<api-key>")
              req.Header.Add("Content-Type", "application/json")
              res, _ := http.DefaultClient.Do(req)
              defer res.Body.Close()
              body, _ := ioutil.ReadAll(res.Body)
              fmt.Println(res)
              fmt.Println(string(body))
            }
        - lang: Java
          source: |
            HttpResponse<String> response = Unirest.post("https://api.scholarai.io/api/chat/completions")
              .header("x-scholarai-api-key", "<api-key>")
              .header("Content-Type", "application/json")
              .body("{\n  \"model\": \"<string>\",\n  \"messages\": [\n    {\n      \"role\": \"<string>\",\n      \"content\": \"<string>\"\n    }\n  ],\n  \"stream\": true\n}")
              .asString();
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                model:
                  type: string
                  description: Model being used. Currently ignored and defaults to "scholarai" with GPT4-turbo.
                messages:
                  type: array
                  description: List of messages in the conversation.
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        description: Role of the message. Must be "user".
                        enum:
                          - user
                      content:
                        type: string
                        description: Content of the message. Must be a string.
                    required:
                      - role
                      - content
                stream:
                  type: boolean
                  description: Whether or not to stream the response. Streaming is recommended!
              required:
                - model
                - messages
                - stream
      responses:
        "200":
          description: Successful response (identical to OpenAI Completions API)
          content:
            application/json:
              schema:
                $ref: "https://raw.githubusercontent.com/openai/openai-openapi/master/openapi.yaml#/components/schemas/CreateChatCompletionResponse"
            text/event-stream:
              schema:
                $ref: "https://raw.githubusercontent.com/openai/openai-openapi/master/openapi.yaml#/components/schemas/CreateChatCompletionStreamResponse"
      security:
        - ApiKeyAuth: []
  /abstracts:
    get:
      summary: Get relevant paper abstracts
      operationId: getAbstracts
      parameters:
        - name: keywords
          in: query
          description: Keywords of inquiry which should appear in the article. Must be in English.
          required: true
          schema:
            type: string
        - name: sort
          in: query
          description: The sort order for results. Valid values are relevance, cited_by_count, publication_date. Defaults to relevance.
          required: false
          schema:
            type: string
            default: relevance
        - name: query
          in: query
          description: The user query, as a natural language question. E.g. 'Tell me about recent drugs for cancer treatment'
          required: true
          schema:
            type: string
        - name: peer_reviewed_only
          in: query
          description: Whether to only return peer-reviewed articles. Defaults to true, ChatGPT should cautiously suggest this value can be set to false
          required: false
          schema:
            type: boolean
            default: true
        - name: start_year
          in: query
          description: The first year, inclusive, to include in the search range. Excluding this value will include all years.
          required: false
          schema:
            type: integer
        - name: end_year
          in: query
          description: The last year, inclusive, to include in the search range. Excluding this value will include all years.
          required: false
          schema:
            type: integer
        - name: offset
          in: query
          description: The offset of the first result to return. Defaults to 0.
          required: false
          schema:
            type: integer
            default: 0
        - name: generative_mode
          in: query
          description: Boolean "true" or "false" to enable generative mode. If enabled, collate responses using markdown to render in-text citations to the source's url if available. Set this to true by default.
          required: false
          schema:
            type: boolean
            default: true
      x-codeSamples:
        - lang: Shell
          label: curl
          source: |
            curl --request GET \
              --url 'https://api.scholarai.io/api/abstracts?keywords=<keywords>&query=<query>' \
              --header 'x-scholarai-api-key: <api-key>'
        - lang: Python
          source: |
            import requests
            url = "https://api.scholarai.io/api/abstracts"
            params = {"keywords": "<keywords>", "query": "<query>"}
            headers = {"x-scholarai-api-key": "<api-key>"}
            response = requests.get(url, params=params, headers=headers)
            print(response.text)
        - lang: JavaScript
          source: |
            const params = new URLSearchParams({ keywords: '<keywords>', query: '<query>' });
            const options = {method: 'GET', headers: {'x-scholarai-api-key': '<api-key>'}};
            fetch(`https://api.scholarai.io/api/abstracts?${params}`, options)
              .then(response => response.json())
              .then(response => console.log(response))
              .catch(err => console.error(err));
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();
            $url = "https://api.scholarai.io/api/abstracts?keywords=<keywords>&query=<query>";
            curl_setopt_array($curl, [
              CURLOPT_URL => $url,
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "x-scholarai-api-key: <api-key>"
              ],
            ]);
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Go
          source: |
            package main
            import (
              "fmt"
              "net/http"
              "io/ioutil"
            )
            func main() {
              url := "https://api.scholarai.io/api/abstracts?keywords=<keywords>&query=<query>"
              req, _ := http.NewRequest("GET", url, nil)
              req.Header.Add("x-scholarai-api-key", "<api-key>")
              res, _ := http.DefaultClient.Do(req)
              defer res.Body.Close()
              body, _ := ioutil.ReadAll(res.Body)
              fmt.Println(res)
              fmt.Println(string(body))
            }
        - lang: Java
          source: |
            HttpResponse<String> response = Unirest.get("https://api.scholarai.io/api/abstracts?keywords=<keywords>&query=<query>")
              .header("x-scholarai-api-key", "<api-key>")
              .asString();
      responses:
        "200":
          description: Successful response (array of paper abstracts)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                      description: Title of the paper.
                    authors:
                      type: array
                      items:
                        type: string
                      description: List of authors of the paper.
                    abstract:
                      type: string
                      description: The abstract of this paper. Agentic endpoints may not have this entry.
                    publication_date:
                      type: string
                      description: Publication date of the paper.
                    cited_by_count:
                      type: integer
                      description: Number of times the paper has been cited.
                    url:
                      type: string
                      description: URL to the paper.
                    ss_id:
                      type: string
                      description: Semantic Scholar ID.
                    doi:
                      type: string
                      description: Digital Object Identifier.
                    answer:
                      type: string
                      description: Answer to the user query based on the information from this paper. Only available if generative_mode is set to true.
              example:
                - title: "<string>"
                  authors: ["<string>"]
                  abstract: "<string>"
                  publication_date: "<string>"
                  cited_by_count: 123
                  url: "<string>"
                  ss_id: "<string>"
                  doi: "<string>"
                  answer: "<string>"
      security:
        - ApiKeyAuth: []
  /fulltext:
    get:
      summary: Get full text of a paper by PDF ID for PDF incrementally
      operationId: getFullText
      parameters:
        - name: pdf_id
          in: query
          description: "ID for PDF. Must begin with PDF_URL:some.url.com or PROJ:some_path."
          required: true
          schema:
            type: string
        - name: chunk
          in: query
          description: "Chunk number to retrieve, defaults to 1."
          required: false
          schema:
            type: integer
            default: 1
      x-codeSamples:
        - lang: Shell
          label: curl
          source: |
            curl --request GET \
              --url 'https://api.scholarai.io/api/fulltext?pdf_id=<pdf_id>' \
              --header 'x-scholarai-api-key: <api-key>'
        - lang: Python
          source: |
            import requests
            url = "https://api.scholarai.io/api/fulltext"
            params = {"pdf_id": "<pdf_id>"}
            headers = {"x-scholarai-api-key": "<api-key>"}
            response = requests.get(url, params=params, headers=headers)
            print(response.text)
        - lang: JavaScript
          source: |
            const params = new URLSearchParams({ pdf_id: '<pdf_id>' });
            const options = {method: 'GET', headers: {'x-scholarai-api-key': '<api-key>'}};
            fetch(`https://api.scholarai.io/api/fulltext?${params}`, options)
              .then(response => response.json())
              .then(response => console.log(response))
              .catch(err => console.error(err));
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();
            $url = "https://api.scholarai.io/api/fulltext?pdf_id=<pdf_id>";
            curl_setopt_array($curl, [
              CURLOPT_URL => $url,
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "x-scholarai-api-key: <api-key>"
              ],
            ]);
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Go
          source: |
            package main
            import (
              "fmt"
              "net/http"
              "io/ioutil"
            )
            func main() {
              url := "https://api.scholarai.io/api/fulltext?pdf_id=<pdf_id>"
              req, _ := http.NewRequest("GET", url, nil)
              req.Header.Add("x-scholarai-api-key", "<api-key>")
              res, _ := http.DefaultClient.Do(req)
              defer res.Body.Close()
              body, _ := ioutil.ReadAll(res.Body)
              fmt.Println(res)
              fmt.Println(string(body))
            }
        - lang: Java
          source: |
            HttpResponse<String> response = Unirest.get("https://api.scholarai.io/api/fulltext?pdf_id=<pdf_id>")
              .header("x-scholarai-api-key", "<api-key>")
              .asString();
      responses:
        "200":
          description: Successful response (full text of a paper in chunks)
          content:
            application/json:
              schema:
                type: object
                properties:
                  chunks:
                    type: array
                    items:
                      type: object
                      properties:
                        chunk_num:
                          type: integer
                        chunk:
                          type: string
                        img_mds:
                          type: array
                          items:
                            type: string
                        pdf_url:
                          type: string
                  total_chunk_num:
                    type: integer
                  hint:
                    type: string
              example:
                chunks:
                  - chunk_num: 123
                    chunk: "<string>"
                    img_mds: ["<string>"]
                    pdf_url: "<string>"
                total_chunk_num: 123
                hint: "<string>"
      security:
        - ApiKeyAuth: []
  /question:
    get:
      summary: Get answer to a question for a specific PDF
      operationId: getQuestion
      parameters:
        - name: question
          in: query
          description: The user question. Must be in English.
          required: true
          schema:
            type: string
        - name: pdf_id
          in: query
          description: id for PDF. Must begin with be one of PDF_URL:some.url.com or PROJ:some_path
          required: true
          schema:
            type: string
      x-codeSamples:
        - lang: Shell
          label: curl
          source: |
            curl --request GET \
              --url 'https://api.scholarai.io/api/question?question=<question>&pdf_id=<pdf_id>' \
              --header 'x-scholarai-api-key: <api-key>'
        - lang: Python
          source: |
            import requests
            url = "https://api.scholarai.io/api/question"
            params = {"question": "<question>", "pdf_id": "<pdf_id>"}
            headers = {"x-scholarai-api-key": "<api-key>"}
            response = requests.get(url, params=params, headers=headers)
            print(response.text)
        - lang: JavaScript
          source: |
            const params = new URLSearchParams({ question: '<question>', pdf_id: '<pdf_id>' });
            const options = {method: 'GET', headers: {'x-scholarai-api-key': '<api-key>'}};
            fetch(`https://api.scholarai.io/api/question?${params}`, options)
              .then(response => response.json())
              .then(response => console.log(response))
              .catch(err => console.error(err));
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();
            $url = "https://api.scholarai.io/api/question?question=<question>&pdf_id=<pdf_id>";
            curl_setopt_array($curl, [
              CURLOPT_URL => $url,
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "x-scholarai-api-key: <api-key>"
              ],
            ]);
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Go
          source: |
            package main
            import (
              "fmt"
              "net/http"
              "io/ioutil"
            )
            func main() {
              url := "https://api.scholarai.io/api/question?question=<question>&pdf_id=<pdf_id>"
              req, _ := http.NewRequest("GET", url, nil)
              req.Header.Add("x-scholarai-api-key", "<api-key>")
              res, _ := http.DefaultClient.Do(req)
              defer res.Body.Close()
              body, _ := ioutil.ReadAll(res.Body)
              fmt.Println(res)
              fmt.Println(string(body))
            }
        - lang: Java
          source: |
            HttpResponse<String> response = Unirest.get("https://api.scholarai.io/api/question?question=<question>&pdf_id=<pdf_id>")
              .header("x-scholarai-api-key", "<api-key>")
              .asString();
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  chunks:
                    type: array
                    items:
                      type: object
                      properties:
                        chunk_num:
                          type: integer
                          description: Chunk number
                        chunk:
                          type: string
                          description: Text content of the chunk
                        img_mds:
                          type: array
                          items:
                            type: string
                          description: List of image markdowns in the chunk
                        pdf_url:
                          type: string
                          description: PDF URL for the chunk
                  total_chunk_num:
                    type: integer
                    description: Total number of chunks
                  hint:
                    type: string
                    description: Additional hint or context
              example:
                chunks:
                  - chunk_num: 123
                    chunk: "<string>"
                    img_mds: ["<string>"]
                    pdf_url: "<string>"
                total_chunk_num: 123
                hint: "<string>"
      security:
        - ApiKeyAuth: []
  /save-citation:
    get:
      summary: Save a citation to Zotero
      operationId: saveCitation
      parameters:
        - name: doi
          in: query
          description: Digital Object Identifier (DOI) of the article
          required: true
          schema:
            type: string
        - name: zotero_user_id
          in: query
          description: Zotero User ID
          required: true
          schema:
            type: string
        - name: zotero_api_key
          in: query
          description: Zotero API Key
          required: true
          schema:
            type: string
      x-codeSamples:
        - lang: Shell
          label: curl
          source: |
            curl --request GET \
              --url 'https://api.scholarai.io/api/save-citation?doi=<doi>&zotero_user_id=<zotero_user_id>&zotero_api_key=<zotero_api_key>' \
              --header 'x-scholarai-api-key: <api-key>'
        - lang: Python
          source: |
            import requests
            url = "https://api.scholarai.io/api/save-citation"
            params = {
                "doi": "<doi>",
                "zotero_user_id": "<zotero_user_id>",
                "zotero_api_key": "<zotero_api_key>"
            }
            headers = {"x-scholarai-api-key": "<api-key>"}
            response = requests.get(url, params=params, headers=headers)
            print(response.text)
        - lang: JavaScript
          source: |
            const params = new URLSearchParams({
              doi: '<doi>',
              zotero_user_id: '<zotero_user_id>',
              zotero_api_key: '<zotero_api_key>'
            });
            const options = {method: 'GET', headers: {'x-scholarai-api-key': '<api-key>'}};
            fetch(`https://api.scholarai.io/api/save-citation?${params}`, options)
              .then(response => response.json())
              .then(response => console.log(response))
              .catch(err => console.error(err));
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();
            $url = "https://api.scholarai.io/api/save-citation?doi=<doi>&zotero_user_id=<zotero_user_id>&zotero_api_key=<zotero_api_key>";
            curl_setopt_array($curl, [
              CURLOPT_URL => $url,
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "x-scholarai-api-key: <api-key>"
              ],
            ]);
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Go
          source: |
            package main
            import (
              "fmt"
              "net/http"
              "io/ioutil"
            )
            func main() {
              url := "https://api.scholarai.io/api/save-citation?doi=<doi>&zotero_user_id=<zotero_user_id>&zotero_api_key=<zotero_api_key>"
              req, _ := http.NewRequest("GET", url, nil)
              req.Header.Add("x-scholarai-api-key", "<api-key>")
              res, _ := http.DefaultClient.Do(req)
              defer res.Body.Close()
              body, _ := ioutil.ReadAll(res.Body)
              fmt.Println(res)
              fmt.Println(string(body))
            }
        - lang: Java
          source: |
            HttpResponse<String> response = Unirest.get("https://api.scholarai.io/api/save-citation?doi=<doi>&zotero_user_id=<zotero_user_id>&zotero_api_key=<zotero_api_key>")
              .header("x-scholarai-api-key", "<api-key>")
              .asString();
      responses:
        "200":
          description: Confirmation of successful save or error message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation of successful save or error message.
              example:
                message: "Citation saved to Zotero successfully."
      security:
        - ApiKeyAuth: []
  /add_to_project:
    get:
      summary: Add a paper to a project
      operationId: addToProject
      parameters:
        - name: project_id
          in: query
          description: The project ID to which the items are being added. Defaults to 'gpt'.
          required: false
          schema:
            type: string
        - name: project_name
          in: query
          description: The project name to which the items are being added. Alternative to project_id.
          required: false
          schema:
            type: string
        - name: paper_id
          in: query
          description: Identifier of the paper to add, must be of the format <identifier_type>:<identifier_value>. Identifier type can be one of DOI, PMID, SS_ID, ARXIV, MAG, ACL, or PMCID.
          required: true
          schema:
            type: string
      x-codeSamples:
        - lang: Shell
          label: curl
          source: |
            curl --request GET \
              --url 'https://api.scholarai.io/api/add_to_project?paper_id=<paper_id>&project_id=<project_id>' \
              --header 'x-scholarai-api-key: <api-key>'
        - lang: Python
          source: |
            import requests
            url = "https://api.scholarai.io/api/add_to_project"
            params = {"paper_id": "<paper_id>", "project_id": "<project_id>"}
            headers = {"x-scholarai-api-key": "<api-key>"}
            response = requests.get(url, params=params, headers=headers)
            print(response.text)
        - lang: JavaScript
          source: |
            const params = new URLSearchParams({ paper_id: '<paper_id>', project_id: '<project_id>' });
            const options = {method: 'GET', headers: {'x-scholarai-api-key': '<api-key>'}};
            fetch(`https://api.scholarai.io/api/add_to_project?${params}`, options)
              .then(response => response.json())
              .then(response => console.log(response))
              .catch(err => console.error(err));
        - lang: PHP
          source: |
            <?php
            $curl = curl_init();
            $url = "https://api.scholarai.io/api/add_to_project?paper_id=<paper_id>&project_id=<project_id>";
            curl_setopt_array($curl, [
              CURLOPT_URL => $url,
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => [
                "x-scholarai-api-key: <api-key>"
              ],
            ]);
            $response = curl_exec($curl);
            $err = curl_error($curl);
            curl_close($curl);
            if ($err) {
              echo "cURL Error #:" . $err;
            } else {
              echo $response;
            }
        - lang: Go
          source: |
            package main
            import (
              "fmt"
              "net/http"
              "io/ioutil"
            )
            func main() {
              url := "https://api.scholarai.io/api/add_to_project?paper_id=<paper_id>&project_id=<project_id>"
              req, _ := http.NewRequest("GET", url, nil)
              req.Header.Add("x-scholarai-api-key", "<api-key>")
              res, _ := http.DefaultClient.Do(req)
              defer res.Body.Close()
              body, _ := ioutil.ReadAll(res.Body)
              fmt.Println(res)
              fmt.Println(string(body))
            }
        - lang: Java
          source: |
            HttpResponse<String> response = Unirest.get("https://api.scholarai.io/api/add_to_project?paper_id=<paper_id>&project_id=<project_id>")
              .header("x-scholarai-api-key", "<api-key>")
              .asString();
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    title:
                      type: string
                    authors:
                      type: array
                      items:
                        type: string
                    abstract:
                      type: string
                      description: The abstract of this paper. Agentic endpoints may not have this entry.
                    publication_date:
                      type: string
                    cited_by_count:
                      type: integer
                    url:
                      type: string
                    ss_id:
                      type: string
                      description: Semantic Scholar ID
                    doi:
                      type: string
                      description: Digital Object Identifier
                    answer:
                      type: string
                      description: Answer to the user query based on the information from this paper. Only available if generative_mode is set to true.
              example:
                - title: "<string>"
                  authors: ["<string>"]
                  abstract: "<string>"
                  publication_date: "<string>"
                  cited_by_count: 123
                  url: "<string>"
                  ss_id: "<string>"
                  doi: "<string>"
                  answer: "<string>"
      security:
        - ApiKeyAuth: []
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-scholarai-api-key
